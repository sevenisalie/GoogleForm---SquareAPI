# -*- coding: utf-8 -*-
"""squareAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oJYu2uqCIZjcaKMI1-379HcvdMW1P4r9
"""

!pip install squareup

import pandas as pd
import matplotlib.pyplot as plt
import json
import time

from square.client import Client
 
# Create an instance of the API Client 
# and initialize it with the credentials 
# for the Square account whose assets you want to manage
 
client = Client(
    square_version='2021-01-21',
    access_token='{{ PUT YOUR TOKEN HERE }}',
    environment='production',
)

def pay_order(order_id):
  import uuid
  idempotency_key = str(uuid.uuid1())
  orders_api = client.orders
  body = {
      "idempotency_key": idempotency_key,
  }

  result = orders_api.pay_order(order_id, body)

  if result.is_success():
      print(result.body)
  elif result.is_error():
      print(result.errors)

catalog_object_id = 'ZXXAFY2RRAPWRN5EBWO2TMOS'
location_id = "LEYP0B9KMKK6K" #satoshi marketplace


def create_order(location_id, catalog_object_id, text):
  orders_api = client.orders
  catalog_object_id = catalog_object_id
  location_id = location_id
  for n in text:
    name = str(n)

  text = ' '.join(text)



  import uuid
  idempotency_key = str(uuid.uuid1())



  result = client.orders.create_order(
    body = {
      "order": {
        "location_id": location_id,
        "line_items": [
          {
            "name": text,
            "quantity": "1",
            "base_price_money": {
            "amount": 0,
            "currency": "USD"
          }

          },
          {
            "quantity": "1",
            "catalog_object_id": catalog_object_id,
          }
        ],
        "fulfillments": [
          {
            "type": "PICKUP",
            "state": "PROPOSED",
            "pickup_details": {
              "recipient": {
                "display_name": name
              },
              "expires_at": "2021-02-09T20:21:54.859Z",
              "auto_complete_duration": "P0DT25H0S",
              "schedule_type": "SCHEDULED",
              "pickup_at": "2021-02-09T20:21:54.859Z",
              "note": text
            }
          }
        ]
      },
      "idempotency_key": idempotency_key
    }
  )

  if result.is_success():
    print(result.body)
  elif result.is_error():
    print(result.errors)

#create_order(location_id=location_id, catalog_object_id=catalog_object_id)

#get the dataframe

#korean = df['3']
#thai = df['4']
#buff = df['5']
#chipotle = df['10']
#sauce = df['12']
#paid = df['25']
#name = df]'13']
#phone df['8']


#Mount the Drive
from google.colab import auth
auth.authenticate_user()
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())

wb = gc.open_by_url('https://docs.google.com/spreadsheets/d/18OPwCbvehbj3WUwtiUtiqCawClHeOEw10LUZaREI6OE/edit#gid=1459323773')
sheet = wb.worksheet('Form Responses')
data = sheet.get_all_values()
df = pd.DataFrame(data)

# all paid orders 
onlypaid = df.loc[df[26] != '']

orders = []
for index, row in onlypaid.iterrows():
  order = row[3], row[4], row[5], row[10], row[12], row[13]
  orders.append(order)


  for order in orders:
    korean = order[0]
    thai = order[1]
    buffalo = order[2]
    chipotle = order[3]
    name = order[5]
    sauce = order[4]



  order = []

  if korean != '':
    order.append(korean + ' KOREAN')
  else:
    order.append(korean + '')

  if thai != '':
    order.append(thai+ ' THAI')
  else:
    order.append(korean + '')

  if buffalo != '':
    order.append(buffalo + ' BUFFALO')
  else:
    order.append(korean + '')

  if chipotle != '':
    order.append(chipotle + ' CHIPOTLE')
  else:
    order.append(korean + '')

  if sauce !='':
    order.append(sauce)

  order.append(name)

  
  time.sleep(.7)
  create_order(location_id=location_id, catalog_object_id=catalog_object_id, text=order)

def get_order_ids(location_id):
  orderslist = {
    "limit": 100,
    "location_ids": [
      location_id,
    ],
    "query": {
      "sort": {
        "sort_field": "CREATED_AT",
        "sort_order": "DESC"
      }
    },
    "return_entries": True
  }

  result = client.orders.search_orders(body=orderslist)
  allorders = result.body
  if result.is_success():
    print(result.body)
  elif result.is_error():
    print(result.errors)
  return allorders

#batch payments
get_order_ids(location_id)

allorders = get_order_ids(location_id)
allorders = allorders['order_entries']
order_ids = []
for entry in allorders:
  orderid = entry['order_id']
  order_ids.append(orderid)

for order_id in order_ids:
  pay_order(order_id)
